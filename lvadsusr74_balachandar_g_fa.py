# -*- coding: utf-8 -*-
"""LVADSUSR74-BALACHANDAR G-FA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cibYZxj7hUlp2q1UEnDVxc0uoqreORG-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#1
walmart_data = pd.read_csv("/content/sample_data/Walmart_Dataset Python_Final_Assessment.csv")
walmart_data.info()
walmart_data.describe()
walmart_data.head()

#2
#filling the null values to 0
walmart_data_df = pd.DataFrame(walmart_data)
walmart_data_df.fillna(0)
walmart_data_df

#removing/searching the unique values
removing_duplicates = walmart_data.nunique()
removing_duplicates

#3
#Calculating sum of sales, average of profit, average of Quantity based on each category
walmart_data = pd.read_csv("/content/sample_data/Walmart_Dataset Python_Final_Assessment.csv")
walmart_data_df = pd.DataFrame(walmart_data)
group_data = walmart_data_df.groupby('Category').aggregate({'Sales':'sum','Profit':'mean','Quantity':'mean'})
print(group_data)

#visualise for profit
from matplotlib import pyplot as plt
group_data['Profit'].plot(kind='line', figsize=(8, 4), title='Profit')
plt.gca().spines[['top', 'right']].set_visible(False)

#4
walmart_data = pd.read_csv("/content/sample_data/Walmart_Dataset Python_Final_Assessment.csv")
#walmart_data.info()
walmart_data_df = pd.DataFrame(walmart_data)

#Bar chart
plt.figure(figsize = (15,12))
plt.bar(walmart_data_df['Category'],walmart_data_df['Profit'],color = 'green')
plt.xlabel('Category')
plt.ylabel('Profit')
plt.title('Category wise Profit')
plt.grid(False)
plt.show()

#bar chart
plt.figure(figsize = (15,12))
plt.bar(walmart_data_df['Category'],walmart_data_df['Sales'],color = 'green')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.title('Category wise Sales')
plt.grid(False)
plt.show()

#Scatter
plt.figure(figsize=(8,6))
plt.scatter(walmart_data_df['Category'],walmart_data_df['Profit'])
plt.title("Distribution of Category and its profit")
plt.xlabel('Category')
plt.ylabel('Profit')
plt.grid(False)
plt.show()

#pie
plt.figure(figsize=(8,6))
plt.pie(walmart_data_df['Sales'],labels=walmart_data_df['Category'],startangle=90)
plt.title("Distribution of Category and its profit")
plt.xlabel('Category')
plt.ylabel('Profit')
plt.show()

#5
#CORELATION BETWEEN SALES AND QUANTITY
walmart_np = np.array((walmart_data['Sales']),(walmart_data['Quantity']))
correlation_criteria = np.corrcoef(walmart_data['Sales'],walmart_data['Quantity'])
#correlation_cri = np.array([0,1])
correlations = correlation_criteria[0,1]
print("The correlation b/w sales and quantity","\n",correlations)

#CORELATION BETWEEN PROFIT AND QUANTITY
walmart_np = np.array((walmart_data['Quantity']),(walmart_data['Profit']))
correlation_criteria = np.corrcoef(walmart_data['Quantity'],walmart_data['Profit'])
#correlation_cri = np.array([0,1])
correlations = correlation_criteria[0,1]
print("The correlation b/w quantity and profit","\n",correlations)

#CORELATION BETWEEN PROFIT AND SALES
walmart_np = np.array((walmart_data['Sales']),(walmart_data['Profit']))
correlation_criteria = np.corrcoef(walmart_data['Sales'],walmart_data['Profit'])
#correlation_cri = np.array([0,1])
correlations = correlation_criteria[0,1]
#correlations = correlation_cri[correlation_criteria]
print("The correlation b/w Sales and profit","\n",correlations)

#the correlation between different datas in the dataset is positively corelated with each other

#6
plt.figure(figsize=(10,9))
sns.boxplot(x=walmart_data['Category'],y=walmart_data['Sales'],data=walmart_data_df)

plt.title("Outliers in Category with respect to sales")
plt.show()

#outliers with respect to profit and sales
plt.figure(figsize=(27,11))
sns.boxplot(x=walmart_data['Sales'],y=walmart_data['Profit'],data=walmart_data_df)

plt.title("Outliers in Sales vs Profit")
plt.show()

#7
#Trend2
from datetime import datetime
walmart_data_df['Order Date'] = pd.to_datetime(walmart_data_df['Order Date'])
plt.figure(figsize = (15,12))
plt.bar(walmart_data_df['Category'],walmart_data_df['Sales'],color = 'green')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.title('Category wise Sales')
plt.grid(axis = 'y')
plt.show()

#Trend1

plt.figure(figsize = (15,12))
plt.plot(walmart_data_df['Sales'],walmart_data_df['Profit'],color = 'green')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.title('Category wise Sales')
plt.grid(axis = 'y')
plt.show()

#Customer Analysis1
group_datas = walmart_data_df.groupby('Order ID').aggregate({'Sales':'sum','Quantity':'Sum'})
plt.figure(figsize=(8,6))
plt.bar(group_datas['Order ID'],group_datas['Sales'],width =0.7,color = 'green')
plt.title("Order ID Vs Sales")
plt.xlabel('Order Id')
plt.ylabel('Sum of sales')
plt.grid(False)
plt.show()

#customer analysis 2
group_data_avg = walmart_data_df.groupby('Order ID')['Order Date'].count()
group_data_avg

#Comprehensive Analytics

##1
walmart_data_df['Ship Date'] = pd.to_datetime(walmart_data_df['Ship Date'])
plt.plot(walmart_data_df['Ship Date'],walmart_data_df['Sales'],marker ='o',color = 'green')
plt.title("Ship Date Vs Sales")
plt.xlabel('Order Id')
plt.ylabel('Sum of sales')
plt.grid(False)
plt.show()


##2
walmart_data_df_gr = walmart_data_df.groupby('Geography')['Sales'].sum()
walmart_pivot = walmart_data_df_gr.pivot_table(index='Geography',values='Sales')
plt.figure(figsize=(10,8))
plt.bar(walmart_pivot['Geography'],walmart_pivot['Sales'])
plt.show()
# The data that are grouped and clusted in the same area where due to the easy accessibility.

##3
#high value customer based on sales
plt.figure(figsize=(15,11))
plt.bar(walmart_data_df['Order ID'],walmart_data_df['Sales'],width =0.7,color = 'green')
plt.title("Order ID Vs Sales")
plt.xlabel('Order Id')
plt.ylabel('Sum of sales')
plt.grid(False)
plt.show()
#high value customers based on quantity they purchase
plt.figure(figsize=(15,11))
plt.bar(walmart_data_df['Order ID'],walmart_data_df['Quantity'],width =0.7,color = 'green')
plt.title("Order ID Vs Sales")
plt.xlabel('Order Id')
plt.ylabel('Sum of sales')
plt.grid(False)
plt.show()